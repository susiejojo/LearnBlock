import "JointMotor.idsl";
import "GenericBase.idsl";

module RoboCompRGBD
{
  exception HardwareFailedException { string what; };

  /** @brief RGB-Depth registration method */
  enum Registration { None, DepthInColor, ColorInDepth };

  sequence<byte> imgType;
  sequence<float> depthType;

  struct ColorRGB {
    byte red;
    byte green;
    byte blue;
  };

  struct PointXYZ {
    float x;
    float y;
    float z;
    float w;
  };

  sequence<float> DepthSeq;
  sequence<ColorRGB> ColorSeq;
  sequence<PointXYZ> PointSeq;
  
  struct CameraParameters
  {
    int focal;
    int width;
    int height;
    int size;
    int FPS;
  };

  /** \struct TRGBDParams
  *@brief struct RGBD parameters
  */
  struct TRGBDParams
  {
  	CameraParameters color;
    CameraParameters depth;
    int timerPeriod;
    bool talkToBase;
    bool talkToJointMotor;
    string driver;
    string device;
  };

  /** \interface RGBD
  *@brief interface RGBD
  */
  interface RGBD
  {
    /**@brief Return RGBD parameters
    * @return struct TRGBDParams
    */
    TRGBDParams getRGBDParams();

    /**@brief Return RGBD parameters
    * @return struct TRGBDParams
    */
    //idempotent TRGBDParams getParams() throws HardwareFailedException;

    /** @brief Set registration method */
    idempotent void setRegistration (Registration value) throws HardwareFailedException;

    /** @brief Get LED Color */
    idempotent Registration getRegistration () throws HardwareFailedException;

    /**@brief RGB Packed - Distance 1 plane */
    idempotent void getData(out imgType rgbMatrix, out depthType distanceMatrix, out RoboCompJointMotor::MotorStateMap hState, out RoboCompGenericBase::TBaseState bState) throws HardwareFailedException;

    idempotent void getDepthInIR(out depthType distanceMatrix, out RoboCompJointMotor::MotorStateMap hState, out RoboCompGenericBase::TBaseState bState) throws HardwareFailedException;

    /** @brief Return the RGB and the depth images */
    idempotent void getImage(
        out ColorSeq color,
        out DepthSeq depth,
        out PointSeq points,
        out RoboCompJointMotor::MotorStateMap hState,
        out RoboCompGenericBase::TBaseState bState) throws HardwareFailedException;

    void getDepth(
    	out DepthSeq depth,
        out RoboCompJointMotor::MotorStateMap hState,
        out RoboCompGenericBase::TBaseState bState) throws HardwareFailedException;

    void getRGB(out ColorSeq color,
        out RoboCompJointMotor::MotorStateMap hState,
        out RoboCompGenericBase::TBaseState bState) throws HardwareFailedException;

    void getXYZ(out PointSeq points,
        out RoboCompJointMotor::MotorStateMap hState,
        out RoboCompGenericBase::TBaseState bState) throws HardwareFailedException;
  };
};
